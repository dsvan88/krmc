class MafiaEngine extends GameEngine {

    stage = 'firstNight';
    _stageDescr = '';
    daysCount = -1;
    prevStage = null;
    timer = null;

    debate = false;
    speakers = [];
    shooting = [];
    killed = [];
    bestMove = [];
    lastWill = [];
    debaters = [];
    courtRoom = [];
    leaveThisRound = [];

    reasons = ['', '–í–±–∏—Ç–∏–π', '–ó–∞—Å—É–¥–∂–µ–Ω–∏–π', '4 –§–æ–ª–∞', '–î—ñ—Å–∫–≤–∞–ª.'];

    prevSpeaker = null;
    activeSpeaker = null;
    lastWillReason = null;

    config = {
        getOutHalfPlayers: true,
        killsPerNight: 1,
        timerMax: 6000,
        lastWillTime: 6000,
        debateTime: 3000,
        mutedSpeakTime: 3000,
        courtAfterFouls: true,
    };

    #courtRoomList = null;

    constructor(data){
        super(data);
        this.gameTable.addEventListener("next", (event) => this.next.call(this, event));
        this.stageDescr = '–ù—É–ª—å–æ–≤–∞ –Ω—ñ—á.\n–ü—Ä–æ–∫–∏–¥–∞—é—Ç—å—Å—è –î–æ–Ω —Ç–∞ –≥—Ä–∞–≤—Ü—ñ –º–∞—Ñ—ñ—ó.\n–£ –≤–∞—Å —î —Ö–≤–∏–ª–∏–Ω–∞ –Ω–∞ —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –¥—ñ–π.';
    }

    get logKey(){
        return `${this.stage === 'shootingNight' ? 'Night' : 'Day'} ‚Ññ${this.daysCount}`;
    }
    get defendant(){
        if (this.debaters.length > 0){
            let defendant = this.debaters.shift();
            return defendant instanceof Player ? defendant : this.players[defendant];
        }
        return null;
    }
    get lastWiller() {
        if (this.lastWill.length > 0){
            let willer = this.lastWill.shift();
            return willer instanceof Player ? willer : this.players[willer];
        }
        return null;
    }
    get courtRoomList(){
        if (this.#courtRoomList)
            return this.#courtRoomList;

        this.#courtRoomList = this.gameTable.closest('.game').querySelector('.courtroom');

        if (this.#courtRoomList)
            return  this.#courtRoomList;

        throw new Error('Element Courtroom not found in DOM tree!');
    }
    /**
     * @param {string} descr
     */
    set stageDescr(descr){
        this._stageDescr = descr;
        let descrBlock = this.gameTable.closest('.game').querySelector('.game__stage');
        descrBlock.innerHTML = descr.replace(/\n/g, '<br>');
    }
    get stageDescr(){
        return this._stageDescr;
    }
    load(state){
        super.load(state);
        this.stageDescr = this._stageDescr;
        this.log = this._log;
        this.resetView();
    }
    undo() {
        let state = this.prevStates.pop();
        if (this.load(state)) {
            this.stageDescr = this._stageDescr;
            this.resetView();
        }
    };
    getNextStage() {

        if (this.theEnd() && this.stage === 'finish')
            return 'finish';
        if (this.stage === 'shootingNight'){
            this.shootingCheck();
        }
        if (this.stage === 'firstNight' || this.stage === 'shootingNight' && this.lastWill.length === 0 || this.stage === 'actionLastWill' && this.lastWillReason === 1)
            return 'morning';
        else if (this.stage === 'morning' || (this.stage === 'daySpeaker' && this.speakers.length > 0))
            return 'daySpeaker';
        else if ((this.stage === 'daySpeaker' && this.speakers.length === 0) || this.stage === 'actionDebate' && this.debaters.length === 0 && this.courtRoom.length > 0) // –ò–ª–∏ - –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–µ
            return 'actionCourt';
        else if ( ['actionCourt', 'actionDebate' ].includes(this.stage) && this.debaters.length > 0)
            return 'actionDebate';
        else if ((['actionCourt', 'actionDebate' ].includes(this.stage) || this.stage === 'actionLastWill' && this.prevStage !== 'shootingNight') && this.courtRoom.length === 0 && this.lastWill.length === 0)
            return 'shootingNight';
        else if (['actionCourt', 'actionDebate', 'shootingNight', 'actionLastWill' ].includes(this.stage)  && this.lastWill.length > 0)
            return 'actionLastWill';
    }
    next() {
        this.save();

        this.prevStage = this.stage;
        this.stage = this.getNextStage();

        if (this[this.stage]){
            this[this.stage]();
        }
        else 
            throw new Error('Something went wrong:(');

        this.resetView()
    };
    dispatchNext(){
        this.gameTable.dispatchEvent(new Event("next"));
    }
    resetView() {
        this.clearView();
        this.applyView();
    }
    clearView() {
        this.players.forEach(player => {
            player.row.classList.remove('speaker', 'shooted', 'out', 'best-moved');

            player.putedCell.innerText = '';
            player.putedCell.classList.remove('puted');

            player.primCell.innerText = '';
            for (let foul = 1; foul <= 4; foul++) {
                let foulCell = player.row.querySelector(`[data-foul="${foul}"]`);
                if (foulCell)
                    foulCell.classList.remove('fail');
                if (foul === 3)
                    foulCell.innerText = '';
            }
        });
        this.closeCourtroom();
    };
    applyView() {
        this.players.forEach(player => {
            if (player.puted[this.daysCount] >= 0) {
                player.putedCell.innerText = player.puted[this.daysCount] + 1;
                player.putedCell.classList.add('puted');
            }
            if (player.out) {
                player.row.classList.add('out');
                player.primCell.innerText = this.reasons[player.out];
            }
            if (this.shooting.includes(player.id)){
                player.row.classList.add('shooted');
            }
            if (this.activeSpeaker && this.activeSpeaker.bestMove && this.bestMove.includes(player.id)){
                player.row.classList.add('best-moved');
            }
            if (player.fouls > 0){
                for (let foul = 1; foul <= player.fouls; foul++) {
                    let foulCell = player.row.querySelector(`[data-foul="${foul}"]`);
                    if (foulCell)
                        foulCell.classList.add('fail');
                    if (foul === 3 && player.muted) {
                        foulCell.innerText = 'ü§ê';
                    }
                }
            }
        })
        if (this.activeSpeaker) {
            this.activeSpeaker.row.classList.add('speaker');
        }
        if (this.courtRoom.length > 0)
            this.openCourtroom();
    };
    putPlayer(playerId) {
        if (this.stage === 'finish') {
            this.players[playerId].addDops(playerId);
        }
        else if (this.stage === 'actionLastWill' && this.activeSpeaker.bestMove) {
            this.actionBestMove(playerId)
        }
        else if (this.stage === 'daySpeaker') {
            this.putPlayerOnVote(playerId);
        }
        else if (this.stage === 'shootingNight') {
            this.shootPlayer(playerId);
        }
        this.resetView();
    };
    shootPlayer(playerId) {
        if (this.shooting.includes(playerId))
            return false;
        this.shooting.push(playerId);

        this.addLog(`–ú–∞—Ñ—ñ—è —Å—Ç—Ä—ñ–ª—è—î —É –≥—Ä–∞–≤—Ü—è ‚Ññ${this.players[playerId].num}!`);

        this.resetView();
    };
    playerFouls(id, foulNum) {
        let player = this.players[id];

        if (player.out > 0) return false;

        if (player.addFouls(foulNum) >= 4) {
            this.outPlayer(id, player.fouls - 1);
            this.leaveThisRound.push(id);
        }
        this.resetView();
    }
    outPlayer(id, reason) {

        this.players[id].out = reason;

        if (reason < 3){
            this.lastWillReason = reason;
            this.lastWill.push(id);
        }
        else this.players[id].muted = false;

        this.addLog(`–ì—Ä–∞–≤–µ—Ü—å ‚Ññ${this.players[id].num} - –∑–∞–ª–∏—à–∞—î –Ω–∞—à–µ –º—ñ—Å—Ç–æ. –ü—Ä–∏—á–∏–Ω–∞: ${this.reasons[reason]}!`);
        return true;
    };
    putPlayerOnVote(putedId) {
        if (this.players[putedId].out > 0) {
            this.addLog(`–ù–µ –ø—Ä–∏–π–Ω—è—Ç–æ! –ó–∞ —Å—Ç–æ–ª–æ–º –Ω–µ–º–∞ –≥—Ä–∞–≤—Ü—è ‚Ññ${this.players[putedId].num}!`);
            return false;
        }
        let maker = (this.timer.left === this.config.timerMax ? this.players[this.prevSpeaker] : this.activeSpeaker);
        if (!maker) return false;

        if (maker.puted[this.daysCount] > 0 && maker.puted[this.daysCount] !== putedId) return false;

        let check = this.courtRoom.indexOf(putedId);
        if (check === -1) {
            this.courtRoom.push(putedId);
            maker.puted[this.daysCount] = putedId;
            this.addLog(`–ì—Ä–∞–≤–µ—Ü—å ‚Ññ${maker.num} - –≤–∏—Å—Ç–∞–≤–ª—è—î –≥—Ä–∞–≤—Ü—è ‚Ññ${this.players[putedId].num} (${this.players[putedId].name})!`);
        }
        else {
            if (maker.puted[this.daysCount] === putedId) {
                this.courtRoom.splice(check, 1);
                maker.puted[this.daysCount] = -1;
                this.addLog('–ü–æ–º–∏–ª–∫–æ–≤–µ –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–Ω—è. –í—ñ–¥–º—ñ–Ω–∞!');
            }
            else {
                this.addLog(`–ì—Ä–∞–≤–µ—Ü—å ‚Ññ${maker.num} - –≤–∏—Å—Ç–∞–≤–ª—è—î –≥—Ä–∞–≤—Ü—è ‚Ññ ${this.players[putedId].num}!\n–ù–µ –ø—Ä–∏–π–Ω—è—Ç–æ! –í–∂–µ –≤–∏—Å—Ç–∞–ª–µ–Ω–∏–π!`);
                return false;
            }
        }
    };
    shootingCheck() {
        if (this.config.killsPerNight === 1) {
            if (this.shooting.length === 1){
                let killed = this.shooting.pop();
                this.killed[this.daysCount].push(killed);
                if (this.checkFirstKill()){
                    this.players[killed].bestMove = true;
                    const message = `–ì—Ä–∞–≤–µ—Ü—å ‚Ññ${this.players[killed].num} - –≤–±–∏—Ç –ø–µ—Ä—à–∏–º!\n–í –Ω—å–æ–≥–æ —î –ø—Ä–∞–≤–æ –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ —Å–æ–±—ñ –∫—Ä–∞—â—ñ–π —Ö—ñ–¥`;
                    alert(message);
                    this.addLog(message);
                }
                return this.outPlayer(killed, 1);
            }
            else {
                this.shooting.length = 0;
                const message = '–ü—Ä–æ–º–∞—Ö! –ù—ñ—Ö—Ç–æ –Ω–µ –±—É–≤ –≤–±–∏—Ç–∏–π —Ü—ñ—î—é –Ω—ñ—á—á—é.';
                alert(message);
                this.addLog(message);
            }
        }
        return false;
    }
    morning() {
        ++this.daysCount;
        this.killed.push([]);
        this.players.forEach(player => player.puted[this.daysCount] = -1);

        this.prevSpeaker = null;
        this.speakers = this.getSpeakers();

        this.next();
    }
    getActivePlayersCount(role = 0) {
        return this.players.reduce((playersCount, player) => {
            if (player.out > 0) return playersCount;
            if (role === 2 && (player.role == 0 || player.role == 4)) return playersCount; // –ï—Å–ª–∏ –∏—â–µ–º –º–∞—Ñ–æ–≤ - –æ—Ç—Å–µ–∫–∞–µ–º –º–∏—Ä–æ–≤
            if (role === 1 && (player.role == 1 || player.role == 2)) return playersCount; // –ï—Å–ª–∏ –∏—â–µ–º –º–∏—Ä–æ–≤ - –æ—Ç—Å–µ–∫–∞–µ–º –º–∞—Ñ–æ–≤
            return ++playersCount;
        }, 0);
    }
    getSpeakers() {
        let speakers = [];
        let shifted = [];
        let speakerOffset = this.daysCount >= this.maxPlayers ? this.daysCount - this.maxPlayers : this.daysCount;
            
        this.players.forEach((player, index) => {
            if (player.out > 0) return;
            if (index < speakerOffset)
                shifted.push(player.id);
            else
                speakers.push(player.id);
        })
        if (shifted.length > 0) {
            shifted.forEach(playerId => speakers.push(playerId));
        }
        return speakers;
    }
    nextSpeaker() {
        let player;
        for (; ;) {
            player = this.players[this.speakers.shift()];
            if (player === this.activeSpeaker) continue;
            if (player.out > 0 && player.muted) {
                player.unmute();
                continue;
            }
            if (player.out > 0) continue;
            if (!player.muted) return player;
            if (this.getActivePlayersCount() < 5) {
                player.unmute();
                this.timer.left = this.config.mutedSpeakTime;
                return player;
            }
            let put = parseInt(prompt(`–ì—Ä–∞–≤–µ—Ü—å ‚Ññ${player.num} –º–æ–≤—á–∏—Ç—å, –∞–ª–µ –º–æ–∂–µ –≤–∏—Å—Ç–∞–≤–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—É—Ä—É: `, '0'));
            if (put > 0) {
                this.prevSpeaker = player.id;
                this.putPlayerOnVote(put - 1);
                player.unmute();
            };
        }
    };
    actionCourt() {
        this.activeSpeaker = null;
        if (this.leaveThisRound.length > 0 && this.config.courtAfterFouls)
        {
            let message = `–°—å–æ–≥–æ–¥–Ω—ñ –Ω–∞—Å ${(this.leaveThisRound.length > 1 ? '–ø–æ–∫–∏–Ω—É–ª–∏ –≥—Ä–∞–≤—Ü—ñ ‚Ññ' + this.courtList(this.leaveThisRound) : '–ø–æ–∫–∏–Ω—É–≤ –≥—Ä–∞–≤–µ—Ü—å ‚Ññ' + this.players[this.leaveThisRound.pop()].num)}. –ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è.`;
            alert(message);
            this.addLog(message);
            this.courtRoom.length = 0;
            return this.dispatchNext();
        }
        this.stageDescr = '–ó–∞–ª —Å—É–¥–∞.\n–ü—Ä–æ—Ö–∞–Ω–Ω—è –¥–æ –≥—Ä–∞–≤—Ü—ñ–≤ –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –±—É–¥—å-—è–∫—É –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—é —Ç–∞ –ø—Ä–∏–±—Ä–∞—Ç–∏ —Ä—É–∫–∏ –≤—ñ–¥ —Å—Ç–æ–ª–∞';
       
        let votesAll = 0,
        playersCount = 0,
        voted = new Map(),
        maxVotes = 0,
        message = `–£–≤–∞–∂–∞–µ–º—ã–µ –∏–≥—Ä–æ–∫–∏, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∑–∞–ª —Å—É–¥–∞!\n–ù–∞ ${(this.debate ? '–ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–µ' : '–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏')} –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∏–≥—Ä–æ–∫–∏: ${this.courtList(this.courtRoom)}\n`,
        defendantCount = this.courtRoom.length;
        
        if (defendantCount === 0)
        {
            message += '\n–ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è.'
            alert( message );
            this.addLog(message);
            return this.dispatchNext();
        }
        
        alert(message);

        if (defendantCount === 1)
        {
            message = '–ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –±—ã–ª –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ª–∏—à—å 1 –∏–≥—Ä–æ–∫\n';
            let playerId = this.courtRoom.pop();
            if (this.daysCount > 0)
            {
                message += `–ù–∞—à –≥–æ—Ä–æ–¥ –ø–æ–∫–∏–¥–∞–µ—Ç –∏–≥—Ä–æ–∫ ‚Ññ${this.players[playerId].num}}!`;
                alert(message + '\n–£ –≤–∞—Å –µ—Å—Ç—å 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ—á–∏');
                this.outPlayer(playerId,2);
            }
            else {
                message += `–≠—Ç–æ–≥–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.`;
                alert(message + '\n\n–ù–∞—Å—Ç—É–ø–∞–µ—Ç —Ñ–∞–∑–∞ –Ω–æ—á–∏!')
            }
            this.addLog(message);
            return this.dispatchNext();
        }
        votesAll = playersCount = this.getActivePlayersCount();

        message = '';
        while(this.courtRoom.length > 0){
            let playerId = this.courtRoom.shift();
            if (votesAll < 1) {
                voted.set(playerId, 0);
                message += `–ò–≥—Ä–æ–∫  ‚Ññ${this.players[playerId].num} \t–ì–æ–ª–æ—Å–∞: 0\n`;
                continue;
            }
            let vote = this.courtRoom.length === 1 ? parseInt(prompt(`${this.players[playerId].num}! –ö—Ç–æ –∑–∞ —Ç–æ, —á—Ç–æ –±—ã –Ω–∞—à –≥–æ—Ä–æ–¥ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä–æ–∫ –ø–æ–¥ ‚Ññ ${this.players[playerId].num}`, '0')) : votesAll;
            message += `–ò–≥—Ä–æ–∫  ‚Ññ ${this.players[playerId].num} \t–ì–æ–ª–æ—Å–∞: ${vote}\n`;
            if (vote > 0) {
                voted.set(playerId, vote);
                votesAll -= vote;
                if (maxVotes < vote) {
                    maxVotes = vote;
                }
            }
        };
        voted.forEach((votes, playerId) => {
            if (votes === maxVotes){
                this.debaters.push(playerId);
            }
        });
        
        message = `–ì–æ–ª–æ—Å–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:\n${message}`;
        if (this.debaters.length===1)
        {
            let player = this.defendant;
            message += `\n–ù–∞—Å –ø–æ–∫–∏–¥–∞–µ—Ç –ò–≥—Ä–æ–∫ –ø–æ–¥ ‚Ññ ${player.num}.\n–£ –≤–∞—Å –ø—Ä–æ—â–∞–ª—å–Ω–∞—è –º–∏–Ω—É—Ç–∞.`;
            this.outPlayer(player.id, 2);
            alert(message);
            this.addLog(message);
            return this.dispatchNext();
        }

        let _debaters = this.courtList(this.debaters);
        message += '–í –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ø–µ—Ä–µ—Å—Ç—Ä–µ–ª–∫–∞. –ú–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏: ' + _debaters;

        alert(message);

        if (this.debate && this.debaters.length === defendantCount)
        {
            if (playersCount > 4 || this.config.getOutHalfPlayers)
            {
                let vote = parseInt(prompt(`–ö—Ç–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏: ${_debaters} –ø–æ–∫–∏–Ω—É–ª–∏ —Å—Ç–æ–ª?'`,'0'));
                if ( vote > playersCount/2 )
                {
                    message=`–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ (${vote} –∏–∑ ${playersCount}) - –∑–∞!\n–ò–≥—Ä–æ–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏: ${_debaters} –ø–æ–∫–∏–¥–∞—é—Ç —Å—Ç–æ–ª.`;
                    while(this.debaters.length > 0)
                        this.outPlayer(this.debaters.shift(),2);
                }
                else 
                    message = `–ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ (${playersCount-vote}) –∏–∑ ${playersCount}) - –ø—Ä–æ—Ç–∏–≤!\n–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–∫–∏–¥–∞–µ—Ç —Å—Ç–æ–ª.`;
            }
            else 
                message = '–ü—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∏–≥—Ä–æ–∫–æ–≤ –º–µ–Ω–µ–µ 5 –Ω–µ–ª—å–∑—è –ø–æ–¥–Ω—è—Ç—å 2 –∏ –±–æ–ª–µ–µ –∏–≥—Ä–æ–∫–æ–≤.\n–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–∫–∏–¥–∞–µ—Ç —Å—Ç–æ–ª.';
            this.debaters.length = 0;
        }
        if (this.debaters.length > 0)
        {
            this.debate = true;
            this.courtRoom = this.debaters.slice(0);
        }

        alert(message);
        this.addLog(message);
        return this.dispatchNext();
    }
    daySpeaker() {
        this.prevSpeaker = this.activeSpeaker ? this.activeSpeaker.id : null;
        this.activeSpeaker = this.nextSpeaker();
        this.stageDescr = `–î–µ–Ω—å ‚Ññ${this.daysCount}\n–ü—Ä–æ–º–æ–≤–∞ –≥—Ä–∞–≤—Ü—è ‚Ññ${this.activeSpeaker.num}`;
    };
    actionDebate(){
        this.timer.left = this.config.debateTime;
        this.activeSpeaker = this.defendant;
        this.stageDescr = `–ü–µ—Ä–µ—Å—Ç—Ä—ñ–ª–∫–∞.\n–ü—Ä–æ–º–æ–≤–∞ –≥—Ä–∞–≤—Ü—è ‚Ññ${this.activeSpeaker.num}`;
    };
    actionLastWill(){
        this.timer.left = this.config.lastWillTime;
        this.activeSpeaker = this.lastWiller;
        this.stageDescr = `–ó–∞–ø–æ–≤—ñ—Ç.\n–ü—Ä–æ–º–æ–≤–∞ –≥—Ä–∞–≤—Ü—è ‚Ññ${this.activeSpeaker.num}`;
    };
    actionBestMove(playerId){

        if (!this.activeSpeaker.bestMoveAuthor)
            this.activeSpeaker.bestMoveAuthor = true;

        this.bestMove.push(playerId);
        if (this.bestMove.length === 3)
        {
            const message = `–ì—Ä–∞–≤–µ—Ü—å ‚Ññ${this.activeSpeaker.num} –≤–≤–∞–∂–∞—î, –≥—Ä–∞–≤—Ü—è–º–∏ –º–∞—Ñ—ñ—ó, –≥—Ä–∞–≤—Ü—ñ–≤, –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏: ${this.courtList(this.bestMove)}`;
            if (confirm(message+'?')){
                this.activeSpeaker.bestMove = false;
                this.addLog(message);
            }
            else {
                this.bestMove.length = 0;
                this.activeSpeaker.bestMoveAuthor = false;
            }
        }
    }
    courtList(list){
        let courtList = '';
        list.forEach(defendant => courtList += `${defendant + 1}, `);
        courtList = courtList.slice(0, -2);
        return courtList;
    }
    shootingNight(){
        const message = '–ú–∞—Ñ—ñ—è –ø—ñ–¥—ñ–π–º–∞—î —Å–≤–æ—é –∑–±—Ä–æ—é —Ç–∞ —Å—Ç—Ä—ñ–ª—è—î –ø–æ –≥—Ä–∞–≤—Ü—è–º.\n–ó—Ä–æ–±—ñ—Ç—å –í–∞—à –≤–∏–±—ñ—Ä!'
        this.stageDescr = `–ù—ñ—á ‚Ññ${this.daysCount}.\n${message}`;
        this.addLog(message);
    }
    openCourtroom(){
        this.courtRoomList.innerText = "–ù–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –∏–≥—Ä–æ–∫–∏ –ø–æ–¥ –Ω–æ–º–µ—Ä–∞–º–∏: " + this.courtList(this.courtRoom);
    }
    closeCourtroom(){
        this.courtRoomList.innerText = '';
    }
    checkFirstKill(){
        let check = this.killed.reduce((killedCount, killedAtDay) => killedCount + killedAtDay.length, 0);
        return check === 1;
    }
    addLog(message){
        let logEntity = {};
        logEntity[this.logKey] = message;
        console.log(logEntity);
        this.log = logEntity;
    };
    finish(){
        alert(this.stageDescr.replace(/BR/g,'\n'));
    }
    theEnd(winner){
        let message = '',
            red = this.getActivePlayersCount(1),
            mafs = this.getActivePlayersCount(2);
        console.log(red,mafs);
        if (mafs===0 || winner === 1)
        {
            this.winners = 1;
            message = '–ú–∏—Ä–Ω–µ –º—ñ—Å—Ç–æ!\n–í—ñ–¥ —Ç–µ–ø–µ—Ä, –í–∞—à—ñ –¥—ñ—Ç–∏ –º–æ–∂—É—Ç—å —Å–ø–∞—Ç–∏ —Å–ø–æ–∫—ñ–π–Ω–æ!';
        }
        else if (mafs >= red || winner === 2)
        {
            this.winners = 2;
            message = "–ú–∞—Ñ—ñ—é!\n–í—ñ–¥ —Ç–µ–ø–µ—Ä, –í–∞—à—ñ –¥—ñ—Ç–∏ –º–æ–∂—É—Ç—å —Å–ø–∞—Ç–∏ —Å–∏—Ç–æ –π —Å–ø–æ–∫—ñ–π–Ω–æ!";
        }
        if (this.winners)
        {
            this.stageDescr = `–í—ñ—Ç–∞—î–º–æ –∑ –ø–µ—Ä–µ–º–æ–≥–æ—é: ${message}`;
            this.stage = 'finish';
            return true;
        }
        return false;
    }
}