<?php

namespace app\models;

use app\core\Model;

class Contacts extends Model
{
    public static $table = SQL_TBL_CONTACTS;

    public static function getByUserId(int $userId)
    {
        return self::findBy('user_id', $userId);
    }
    public static function getUserContact(int $userId, string $contactType)
    {
        $table = self::$table;
        $contact = Contacts::query("SELECT * FROM $table WHERE user_id = ? AND type = ? LIMIT 1", [$userId, $contactType], 'Assoc');
        return empty($contact) ? false : $contact[0];
    }
    public static function getUserIdByContact(string $contactType, string $value): mixed
    {
        $table = self::$table;
        $userId = Contacts::query("SELECT user_id FROM $table WHERE type = ? AND contact = ? LIMIT 1", [$contactType, $value], 'Column');
        return empty($userId) ? false : $userId;
    }
    public static function isContactExists($contact)
    {
        return self::isExists(['contact' => $contact], self::$table);
    }
    public static function new(array $data, int $userId):void
    {
        foreach($data as $column => $value){
            if (empty($value)) continue;
            Contacts::add([
                'user_id' => $userId,
                'type' => $column,
                'contact' => $value,
            ]);
        }
    }
    public static function reLink(array $data, int $userId):void
    {
        self::deleteByUserId($userId);
        self::new($data, $userId);
    }
    public static function edit($data, $where)
    {
        $table = self::$table;
        foreach ($data as $key => $value) {
            if (is_array($value)) {
                $data[$key] = json_encode($value, JSON_UNESCAPED_UNICODE);
            }
        }
        return self::update($data, $where, $table);
    }
    public static function add($data)
    {
        $table = self::$table;
        foreach ($data as $key => $value) {
            if (is_array($value)) {
                $data[$key] = json_encode($value, JSON_UNESCAPED_UNICODE);
            }
        }
        return self::insert($data, $table);
    }
    public static function deleteByUserId(int $userId)
    {
        $contacts = self::getByUserId($userId);
        if (empty($contacts)) return true;
        $count = count($contacts);
        for($x=0; $x < $count; $x++){
            self::remove($contacts[$x]['id']);
        }
        return true;
    }
    public static function remove($cid)
    {
        $table = self::$table;
        return self::delete($cid, $table);
    }
    public static function init()
    {
        $table = self::$table;
        self::query(
            "CREATE TABLE IF NOT EXISTS $table (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id INT NOT NULL,
                type CHARACTER VARYING(25) NOT NULL DEFAULT '',
                contact CHARACTER VARYING(250) NOT NULL DEFAULT '',
                data JSON DEFAULT NULL,
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW(),
                CONSTRAINT fk_user
                    FOREIGN KEY(user_id) 
                    REFERENCES users(id)
                    ON DELETE CASCADE
            );"
        );
    }
}
