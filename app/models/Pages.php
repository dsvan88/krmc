<?php

namespace app\models;

use app\core\Locale;
use app\core\Model;

class Pages extends Model
{
    public static $table = SQL_TBL_PAGES;

    public static function getCount(string $type = 'page', bool $all = false)
    {
        $table = static::$table;
        $query = "SELECT COUNT(id) FROM $table WHERE type = ?";
        if ($all)
            return self::query($query, [$type], 'Column');

        $query .= ' AND ( expired_at IS NULL OR expired_at < CURRENT_TIMESTAMP )';
        if (CFG_SOFT_DELETE) {
            $query .= ' AND date_delete IS NULL';
        }
        return self::query($query, [$type], 'Column');
    }
    public static function getPerPage($page = 0, $type = 'news')
    {
        $table = static::$table;
        $query = "SELECT * FROM $table WHERE type = ? ";
        $values = [$type];
        if (CFG_SOFT_DELETE) {
            $query .= ' AND date_delete IS NULL';
        }
        $query .= ' ORDER BY id DESC';

        if ($page === 0)
            $query .= ' LIMIT ' . CFG_NEWS_PER_PAGE;
        else
            $query .= ' LIMIT ' . CFG_NEWS_PER_PAGE . ' OFFSET ' . (CFG_NEWS_PER_PAGE * $page);

        return self::query($query, $values, 'Assoc');
    }
    public static function create(&$data)
    {
        $array = self::prepDbArray($data);
        $array['slug'] = preg_replace(['/[^a-z0-9]+/i', '/--/'], '-', Locale::translitization(trim($array['title'])));
        return self::insert($array, self::$table);
    }
    public static function edit($data, $id)
    {
        $array = self::prepDbArray($data);
        $array['updated_at'] = date('Y-m-d H:i:s', $_SERVER['REQUEST_TIME']);
        return self::update($array, ['id' => $id], static::$table);
    }
    public static function prepDbArray(&$data)
    {
        $array = [
            'title' => trim($data['title']),
            'subtitle' => trim($data['subtitle']),
            'html' => trim($data['html']),
            'published_at' => date('Y-m-d H:i:s', strtotime($data['published_at'])),
        ];
        if (!empty($data['description'])) {
            $pattern = ['/<\/p>\s*<p>/', '/<.*?>/', "/^\"/", "/ \"/", '/ "/', "/\"/", '/"/', "/\'/", "/'/"];
            $replace = ["\n", '', '«', ' «', ' «', '»', '»', '’', '’'];
            $array['description'] = trim(preg_replace($pattern, $replace, $data['description']));
        }
        if (!empty($data['type'])) {
            $array['type'] = trim($data['type']);
        }
        if (!empty($data['expired_at'])) {
            $array['expired_at'] = date('Y-m-d H:i:s', strtotime($data['expired_at']));
        }
        if (!empty($data['logo'])) {
            $array['data']['logo'] = $data['logo'];
        }
        if (!empty($data['keywords'])) {
            $array['data']['keywords'] = explode(',', $data['keywords']);
            foreach ($array['data']['keywords'] as $index => $keyword) {
                $array['data']['keywords'][$index] = trim($keyword);
            }
        }
        if (!empty($array['data'])) {
            $array['data'] = json_encode($array['data'], JSON_UNESCAPED_UNICODE);
        }
        return $array;
    }
    public static function remove(int $id)
    {
        if (CFG_SOFT_DELETE) {
            return self::update(['date_delete' => date('Y-m-d H:i:s', $_SERVER['REQUEST_TIME'])], ['id' => $id]);
        }
        return self::delete($id, static::$table);
    }
    public static function init()
    {
        $table = static::$table;
        self::query(
            "CREATE TABLE IF NOT EXISTS $table (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                user_id INT NOT NULL DEFAULT '1',
                type CHARACTER VARYING(25) NOT NULL DEFAULT 'news',
                title CHARACTER VARYING(250) NOT NULL DEFAULT '',
                slug CHARACTER VARYING(250) NOT NULL DEFAULT '',
                subtitle CHARACTER VARYING(250) NOT NULL DEFAULT '',
                description CHARACTER VARYING(300) NOT NULL DEFAULT '',
                html TEXT NULL DEFAULT NULL,
                data JSON DEFAULT NULL,
                published_at TIMESTAMP DEFAULT NOW(),
                created_at TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW(),
                expired_at TIMESTAMP DEFAULT NULL,
                date_delete TIMESTAMP DEFAULT NULL,
                CONSTRAINT fk_user
                    FOREIGN KEY(user_id) 
                    REFERENCES users(id)
                    ON DELETE SET DEFAULT
            );"
        );

        if (self::isExists(['id' => 1])) return true;

        $data = [
            [
                'type' => 'page',
                'title' => CLUB_NAME,
                'slug' => 'home',
                'subtitle' => 'Про нас',
                'description' => 'Наш клуб позитивних та кмітливих людей, заснований для того, аби кожен бажаючий міг провести час свого дозвілля з гарним настроєм та користью для власного розвитку!',
                'html' => '<p>Наш клуб позитивних та кмітливих людей, заснований для того, аби кожен бажаючий міг провести час свого дозвілля з гарним настроєм та користью для власного розвитку!</p><p>Запрошуємо Вас, до нашого дружнього та кмітливого клубу гравців у Мафію!:)</p>',
            ],
            [
                'type' => 'game',
                'title' => 'Мафія',
                'slug' => 'mafia',
                'subtitle' => 'Класична гра мафія',
                'description' => 'Класична салонна гра Мафія. Гравці розподіляються на два команди, мета кожного з яких - логікою та ораторськими здібностями знешкодити команду супротивніків. Ускладнюється тим, що команда, менша за кількістю гравців - знає, хто у якій команді, а інша - ні.',
                'html' => '<p>Клубна гра Мафія, в класичному стилі вражає свою легкістю та складністю одночасно! Результат кожної гри, завжди залежить не тільки від особистого вкладу кожного окремого гравця, але й від команди в цілому. Так, ми чудово розуміємо, що до цього моменту - нічого нового, для командних видів ігор - не було...</p><p>Але є нюанси!</p><p>Адже, стосовно того, хто знаходиться у твоїй команді - інтрига зберігається до самого закінчення гри! Прокачайте, разом з нами, свої навички логіки, дедукції, емпатії, інтуїції, да й що там казати - телепатії, також!</p><p>Запрошуємо Вас, до нашого дружнього та кмітливого клубу гравців у Мафію!:)</p>',
            ],
            [
                'type' => 'promo',
                'title' => 'Записываемся активнее!',
                'slug' => 'promo',
                'subtitle' => 'Важен каждый игрок!',
                'html' => 'Только Ваше участие позволяет клубу и другим игрокам становиться лучше!',
            ],
        ];
        self::insert($data, $table);
    }
}
