<?

namespace app\models;

use app\core\Model;

class Settings extends Model
{
    public static $mainTable = SQL_TBL_SETTINGS;
    public static $settings = [];

    public static function load($type)
    {
        $table = self::$mainTable;
        self::$settings[$type] = self::query("SELECT * FROM $table WHERE type = ?", [$type], 'Assoc');
        return self::$settings[$type];
    }
    public static function getById($id)
    {
        $table = self::$mainTable;
        $result = self::query("SELECT * FROM $table WHERE WHERE id = ?", [$id], 'Assoc');
        if (empty($result))
            return false;
        return $result[0];
    }
    public static function getImage($name)
    {
        if (!isset(self::$settings['img'])) {
            self::load('img');
        }
        for ($i = 0; $i < count(self::$settings['img']); $i++) {
            if (self::$settings['img'][$i]['short_name'] === $name) {
                return self::$settings['img'][$i];
            }
        }
        return false;
    }
    public static function getPage($name)
    {
        if (!isset(self::$settings['pages'])) {
            self::load('pages');
        }
        for ($i = 0; $i < count(self::$settings['pages']); $i++) {
            if (self::$settings['pages'][$i]['short_name'] === $name) {
                return self::$settings['pages'][$i];
            }
        }
        return false;
    }
    public static function getPageById($id)
    {
        if (!isset(self::$settings['pages'])) {
            self::load('pages');
        }
        for ($i = 0; $i < count(self::$settings['pages']); $i++) {
            if (self::$settings['pages'][$i]['id'] == $id) {
                return self::$settings['pages'][$i];
            }
        }
        return false;
    }
    public static function getBotToken()
    {
        if (!isset(self::$settings['tg-bot'])) {
            self::load('tg-bot');
        }

        if (empty(self::$settings['tg-bot']))
            return false;

        return self::$settings['tg-bot'][0]['value'];
    }
    public static function getTechTelegramId()
    {
        if (!isset(self::$settings['tg-tech'])) {
            self::load('tg-tech');
        }

        if (empty(self::$settings['tg-tech']))
            return false;

        return self::$settings['tg-tech'][0]['value'];
    }
    public static function getMainTelegramId()
    {
        if (!isset(self::$settings['tg-main'])) {
            self::load('tg-main');
        }

        if (empty(self::$settings['tg-main']))
            return false;

        return self::$settings['tg-main'][0]['value'];
    }
    public static function getChat($chatId)
    {
        if (!isset(self::$settings['tg-chat'])) {
            self::load('tg-chat');
        }
        for ($i = 0; $i < count(self::$settings['tg-chat']); $i++) {
            if (!is_array(self::$settings['tg-chat'][$i]['value'])) {
                self::$settings['tg-chat'][$i]['value'] = json_decode(self::$settings['tg-chat'][$i]['value'], true);
            }
            if (self::$settings['tg-chat'][$i]['value']['chatId'] == $chatId) {
                return self::$settings['tg-chat'][$i];
            }
        }
        return false;
    }
    public static function getChats()
    {
        if (!isset(self::$settings['tg-chat'])) {
            self::load('tg-chat');
        }
        for ($i = 0; $i < count(self::$settings['tg-chat']); $i++) {
            if (!is_array(self::$settings['tg-chat'][$i]['value'])) {
                self::$settings['tg-chat'][$i]['value'] = json_decode(self::$settings['tg-chat'][$i]['value'], true);
            }
        }
        return self::$settings['tg-chat'];
    }
    public static function save($data)
    {
        $table = self::$mainTable;
        try {
            $queryCond = ['type' => $data['type'], 'short_name' => $data['short_name']];
            $id = self::query("SELECT id FROM $table WHERE type = :type AND short_name = :short_name", $queryCond, 'Column');
            if (!$id) {
                return self::insert($data, $table);
            }
            self::update($data, ['id' => $id], $table);
            return true;
        } catch (\Throwable $th) {
            error_log($th->__toString());
            return false;
        }
    }
    public static function remove($id)
    {
        $table = self::$mainTable;
        self::delete($id, $table);
    }
    public static function getList($types = [])
    {
        $table = self::$mainTable;
        $where = '';
        if (!empty($types)) {
            $where = ' WHERE type IN (' . implode(',', array_fill(0, count($types), '?')) . ')';
        }
        return self::query("SELECT * FROM $table $where", $types, 'Assoc');
    }
    public static function init(){
        $table = self::$mainTable;
        self::query(
            "CREATE TABLE IF NOT EXISTS $table (
                id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                type CHARACTER VARYING(30) NOT NULL DEFAULT 'pages',
                short_name CHARACTER VARYING(200) NOT NULL DEFAULT '',
                name CHARACTER VARYING(200) NOT NULL DEFAULT '',
                value TEXT NULL DEFAULT NULL,
                by_default TEXT NULL DEFAULT NULL,
                json_value JSON DEFAULT NULL
            );"
        );
        if (self::query("SELECT COUNT (id) FROM $table", [], 'Column') < 1) {
            $settings = [
                ['img', 'MainLogo', 'Основний логотип', '/public/images/club_logo.png', '/public/images/club_logo.png'],
                ['img', 'MainFullLogo', 'Основний логотип', '/public/images/club_logo-full.png', '/public/images/club_logo-full.png'],
                ['img', 'MainLogoMini', 'Основний логотип', '/public/images/club_logo-mini.png', '/public/images/club_logo-mini.png'],
                ['img', 'profile', 'Профиль', '/public/images/profile.png', '/public/images/profile.png'],
                ['img', 'male', 'Профиль', '/public/images/male.png', '/public/images/male.png'],
                ['img', 'female', 'Профиль', '/public/images/female.png', '/public/images/female.png'],
                ['img', 'empty_avatar', 'Нет аватара', '/public/images/empty_avatar.png', '/public/images/empty_avatar.png'],
                ['img', 'news_default', 'Новость', '/public/images/news_default.png', '/public/images/news_default.png'],
                ['tg-bot', 'token_bota', 'Токен Бота', '', ''],
                ['tg-tech', 'tech_chat', 'Технический чат (лог ошибок)', '', ''],
                ['tg-main', 'main_group_chat', 'Основной груповой чат', '', ''],
                ['point', 'win', 'Балы за победу', '1.0', '1.0'],
                ['point', 'bm', 'Лучший ход', '0.0,0.0,0.25,0.4', '0.0,0.0,0.25,0.4'],
                ['point', 'fk_sheriff', 'Отстрел шерифа первым', '0.3', '0.3'],
                ['point', 'maf_dops', 'Допы живым мафам', '0.0,0.3,0.15,0.3', '0.0,0.3,0.15,0.3'],
                ['point', 'mir_dops', 'Допы живым мирным', '0.0,0.0,0.15,0.1', '0.0,0.0,0.15,0.1'],
                ['point', 'fouls', 'Штраф за дискв. фол', '0.3', '0.3'],
                ['pages', 'index', 'Про гру', '<p>Клубна гра Мафія, в класичному стилі вражає свою легкістю та складністю одночасно! Результат кожної гри, завжди залежить не тільки від особистого вкладу кожного окремого гравця, але й від команди в цілому. Так, ми чудово розуміємо, що до цього моменту - нічого нового, для командних видів ігор - не було...</p><p>Але є нюанси!</p><p>Адже, стосовно того, хто знаходиться у твоїй команді - інтрига зберігається до самого закінчення гри! Прокачайте, разом з нами, свої навички логіки, дедукції, емпатії, інтуїції, да й що там казати - телепатії, також!</p><p>Запрошуємо Вас, до нашого дружнього та кмітливого клубу гравців у Мафію!:)</p>', '']
            ];
            $array = [];
            $keys = ['type', 'short_name', 'name',  'value', 'by_default'];
            for ($i = 0; $i < count($settings); $i++) {
                $array[] = array_combine($keys, $settings[$i]);
            }
            self::insert($array, $table);
        }
    }
}
