<?php

namespace app\core;

use app\models\Settings;
use Exception;
use LDAP\Result;

class TelegramBot
{
    public static $message = '';
    private static $botToken = '';
    private static $options = [];
    private static $params = [];
    private static $result = [];

    public function __construct($text = '')
    {
        self::set($text);
    }
    public static function set($text = '')
    {
        self::$botToken = self::getAuthData();
        if (empty(self::$options)) {
            self::$options = [
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_POST => true,       // –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–º POST
                CURLOPT_TIMEOUT => 10,      // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
            ];
        }
        if ($text !== '') {
            self::$params['text'] = $text;
        }
    }
    private static function getAuthData()
    {
        if (!empty(self::$botToken))
            return self::$botToken;
        return Settings::getBotToken();
    }

    public static function sendMessage($userId, $message = '', $messageId = -1)
    {
        $botToken = self::$botToken;
        $params = self::$params;
        $params['chat_id'] = is_array($userId) ? $userId[0] : $userId; // id –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if ($message !== '') {
            $params['text'] = $message;
            $params['parse_mode'] = 'HTML';
        }
        if ($messageId !== -1) {
            $params['reply_to_message_id'] = $messageId;
        }
        $options = self::$options;
        $options[CURLOPT_URL] = "https://api.telegram.org/bot$botToken/sendMessage"; // –∞–¥—Ä–µ—Å api —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
        $options[CURLOPT_POSTFIELDS] = $params; // –∞–¥—Ä–µ—Å api —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞

        $curl = curl_init();

        curl_setopt_array($curl, $options);

        if (is_array($userId) && !empty($userId)) {
            for ($x = 1; $x < count($userId); $x++) {
                usleep(750000);
                $params['chat_id'] = $userId[$x];
                curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
                static::$result[] = json_decode(curl_exec($curl), true);
            }
            return static::$result;
        }
        static::$result = json_decode(curl_exec($curl), true);
        if (static::$result['ok']) {
            return [static::$result];
        }
        throw new Exception(json_encode(static::$result, JSON_UNESCAPED_UNICODE));
    }
    public static function sendMessageWithImage($userId, $message = '', $image = '', $messageId = -1)
    {
        $botToken = self::$botToken;
        $params = self::$params;
        $params['chat_id'] = is_array($userId) ? $userId[0] : $userId; // id –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if ($message !== '') {
            $params['text'] = $message;
            $params['parse_mode'] = 'HTML';
        }
        if ($messageId !== -1) {
            $params['reply_to_message_id'] = $messageId;
        }
        if ($image !== '') {
            $image = Tech::getRequestProtocol() . "://{$_SERVER['SERVER_NAME']}$image";
            $params['text'] = "<a href='$image'>&#8205;</a>" . $params['text'];
            $params['disable_web_page_preview'] = false;
        }

        $options = self::$options;
        $options[CURLOPT_URL] = "https://api.telegram.org/bot$botToken/sendMessage"; // –∞–¥—Ä–µ—Å api —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
        $options[CURLOPT_POSTFIELDS] = $params; // –∞–¥—Ä–µ—Å api —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞

        $curl = curl_init();

        curl_setopt_array($curl, $options);

        if (is_array($userId) && isset($userId[1])) {
            for ($x = 1; $x < count($userId); $x++) {
                usleep(750000);
                $params['chat_id'] = $userId[$x];
                curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
                static::$result[] = json_decode(curl_exec($curl), true);
            }
            return static::$result;
        }
        static::$result = json_decode(curl_exec($curl), true);
        if (static::$result['ok']) {
            return [static::$result];
        }
        throw new Exception(json_encode(static::$result, JSON_UNESCAPED_UNICODE));
    }
    public static function sendPhoto($userId, string $caption = '', string $image = '', $type = 'image/jpeg', $messageId = -1)
    {
        $botToken = self::$botToken;
        $params = self::$params;
        $params['chat_id'] = is_array($userId) ? $userId[0] : $userId; // id –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if (empty($caption)) {
            $params['caption'] = $caption;
            $params['parse_mode'] = 'HTML';
        }
        if ($messageId !== -1) {
            $params['reply_to_message_id'] = $messageId;
        }
        if (empty($image)) {
            $params['photo'] = curl_file_create($image, $type, 'image');
        }
        $options = self::$options;
        $options[CURLOPT_URL] = "https://api.telegram.org/bot$botToken/sendPhoto"; // –∞–¥—Ä–µ—Å api —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞
        $options[CURLOPT_POSTFIELDS] = $params; // –∞–¥—Ä–µ—Å api —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞

        $curl = curl_init();

        curl_setopt_array($curl, $options);

        if (is_array($userId) && isset($userId[1])) {
            for ($x = 1; $x < count($userId); $x++) {
                usleep(750000);
                $params['chat_id'] = $userId[$x];
                curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
                static::$result[] = json_decode(curl_exec($curl), true);
            }
            return static::$result;
        }
        static::$result = json_decode(curl_exec($curl), true);
        if (static::$result['ok']) {
            return [static::$result];
        }
        throw new Exception(json_encode(static::$result, JSON_UNESCAPED_UNICODE));
    }
    public static function deleteMessage($chatId, $messageId)
    {
        $params['chat_id'] = $chatId; // id –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        $params['message_id'] = $messageId;

        return self::send('deleteMessage', $params);
    }
    public static function getMe()
    {
        self::send('getMe', []);
        return static::$result;
    }
    public static function webhookDelete()
    {
        return self::send('deleteWebhook');
    }
    public static function webhookSet($botToken)
    {
        if (strtolower($_SERVER['HTTP_X_FORWARDED_PROTO']) !== 'https')
            return false;

        $options = self::$options;
        $options[CURLOPT_URL] = "https://api.telegram.org/bot$botToken/setWebhook?url=https://$_SERVER[HTTP_HOST]/api/telegram/webhook";

        $curl = curl_init();
        curl_setopt_array($curl, $options);
        static::$result = json_decode(curl_exec($curl), true);
        if (static::$result['ok']) {
            self::$botToken = $botToken;
            return true;
        }
        return false;
    }
    public static function pinMessage($chatId, $messageId)
    {
        $params = [
            'chat_id' => $chatId, // id —á–∞—Ç–∞
            'message_id' => $messageId, // id –∑–∞–∫—Ä–µ–ø–ª—è–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            'disable_notification' => true, // "–¢–∏—Ö–∏–π" –º–µ—Ç–æ–¥ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è, –±–µ–∑ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è
        ];

        return self::send('pinChatMessage', $params);
    }
    public static function unpinMessage($chatId, $messageId)
    {
        $params = [
            'chat_id' => $chatId, // id —á–∞—Ç–∞
            'message_id' => $messageId
        ];

        return self::send('unpinChatMessage', $params);
    }
    public static function editMessage($chatId, $messageId, $message)
    {
        $params = [
            'chat_id' => $chatId, // id —á–∞—Ç–∞
            'message_id' => $messageId, // id —Å–æ–æ–±—â–µ–Ω–∏—è
            'text' => $message, // —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            'parse_mode' => 'HTML', // —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        ];

        return self::send('editMessageText', $params);
    }
    /** 
     * ReactionTypeEmoji:
     *  type 	String 	Type of the reaction, always ‚Äúemoji‚Äù
     *  emoji     String Reaction emoji. Currently, it can be one of "üëç", "üëé", "‚ù§", "üî•", "ü•∞", "üëè", "üòÅ", "ü§î", "ü§Ø", "üò±", "ü§¨", "üò¢", "üéâ", "ü§©", "ü§Æ", "üí©", "üôè", "üëå", "üïä", "ü§°", "ü•±", "ü•¥", "üòç", "üê≥", "‚ù§‚Äçüî•", "üåö", "üå≠", "üíØ", "ü§£", "‚ö°", "üçå", "üèÜ", "üíî", "ü§®", "üòê", "üçì", "üçæ", "üíã", "üñï", "üòà", "üò¥", "üò≠", "ü§ì", "üëª", "üë®‚Äçüíª", "üëÄ", "üéÉ", "üôà", "üòá", "üò®", "ü§ù", "‚úç", "ü§ó", "ü´°", "üéÖ", "üéÑ", "‚òÉ", "üíÖ", "ü§™", "üóø", "üÜí", "üíò", "üôâ", "ü¶Ñ", "üòò", "üíä", "üôä", "üòé", "üëæ", "ü§∑‚Äç‚ôÇ", "ü§∑", "ü§∑‚Äç‚ôÄ", "üò°"
     *  */
    public static function setMessageReaction($chatId, $messageId, $reaction)
    {
        $params = [
            'chat_id' => $chatId, // id —á–∞—Ç–∞
            'message_id' => $messageId, // id —Å–æ–æ–±—â–µ–Ω–∏—è
            'reaction' => [
                [
                    'type' => 'emoji',
                    'emoji' => $reaction
                ]
            ],
        ];

        return self::send('setMessageReaction', $params);
    }

    public static function send(string $method = '', $params = [])
    {
        if (empty($method)) return false;

        $botToken = self::$botToken;
        $options = self::$options;

        if (!empty($params)) {
            $options[CURLOPT_POSTFIELDS] = $params;
        }
        $options[CURLOPT_URL] = "https://api.telegram.org/bot$botToken/$method";

        $curl = curl_init();
        curl_setopt_array($curl, $options);
        static::$result = json_decode(curl_exec($curl), true);

        error_log($method.': '.json_encode(static::$result, JSON_UNESCAPED_UNICODE));
        return !empty(static::$result['ok']);
    }
}
